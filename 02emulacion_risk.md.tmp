# Emulación de una herramienta de Análisis de Riesgo basada en Excel con Python

Existen en Excel una variedad de herramientas para el análisis de riesgo, fundamentalmente utilizando modelado probabilístico de Monte Carlo. De esta manera, es posible introducir incertidumbre en los modelos de decisión y analizar el impacto de esta incertidumbre.

A continuación, para trazar un paralelo entre las herramientas de análisis de riesgo mediante simulación de Monte Carlo y el análisis estadístico con Python se tomará como base un ejemplo que aparece en *Business Analytics* de James Evans del lanzamiento de un nuevo producto farmaceútico. Básicamente se trata de analizar la balanza de pagos entre la inversión inicial del producto y los beneficios netos producidos por las ventas en un horizonte de 5 años.

![Pharmaceuticals spreadheets model](img/pharmaceuticals_spreadsheet.png)

Empezamos por importar los módulos necesarios.


```python
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from IPython.display import display, Markdown, Latex
```

## Datos

Se introducen los datos del modelo, el tamaño base del mercado `Market size`, los ingresos mensuales unitarios `Unit (monthly Rx) revenue`, los costos mensuales unitarios `Unit (monthly Rx) cost`, y la tasa anual utilizada para los cálculos financieros `Discount rate`.

Para iniciar el proyecto es necesario realizar una inversión en investigación y desarrollo `R&D`, y en ensayos clínicos `Clinical Trials`, que sumados devuelven los costos totales del proyecto `Total Project Costs`.


```python
market_size = 2000000
unit_revenue = 130
unit_cost = 40
discount_rate = 0.09

rd_cost = 700000000
trials_cost = 150000000
total_costs = rd_cost + trials_cost
```

## Modelo Estático

Ahora se procede a desarrollar el modelo, se proyecta que cada año el mercado crece de acuerdo al factor `Market growth factor`. Aunque esta es una operación repetitiva es importante escribirla de forma vectorizada (evitando lazos de repetición) para sacar provecho de las bondades de numpy.

Así, en lugar de:


```python
years = range(1, 6)
```


```python
market_growth = np.empty(5)
market_growth[0] = market_size
growth_factor = 0.03
for i in range(1, 5):
    market_growth[i] = market_growth[i - 1] * (growth_factor + 1)
pd.DataFrame({'Tamaño del mercado': market_growth}, index=years).T.style.format('{:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ea058444_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >1</th>        <th class="col_heading level0 col1" >2</th>        <th class="col_heading level0 col2" >3</th>        <th class="col_heading level0 col3" >4</th>        <th class="col_heading level0 col4" >5</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ea058444_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >Tamaño del mercado</th>
                        <td id="T_ea058444_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >2,000,000.00</td>
                        <td id="T_ea058444_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >2,060,000.00</td>
                        <td id="T_ea058444_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >2,121,800.00</td>
                        <td id="T_ea058444_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >2,185,454.00</td>
                        <td id="T_ea058444_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >2,251,017.62</td>
            </tr>
    </tbody></table>



Lo podemos expresar así:


```python
growth_factor = np.append(0, np.repeat(0.03, 4))
market_growth = market_size * (growth_factor + 1).cumprod()
pd.DataFrame({'Tamaño del mercado': market_growth}, index=years).T.style.format('{:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >1</th>        <th class="col_heading level0 col1" >2</th>        <th class="col_heading level0 col2" >3</th>        <th class="col_heading level0 col3" >4</th>        <th class="col_heading level0 col4" >5</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >Tamaño del mercado</th>
                        <td id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >2,000,000.00</td>
                        <td id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >2,060,000.00</td>
                        <td id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >2,121,800.00</td>
                        <td id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >2,185,454.00</td>
                        <td id="T_ea0809e4_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >2,251,017.62</td>
            </tr>
    </tbody></table>



De forma similar, la cuota de mercado crece anualmente de acuerdo a la tasa `Market share growth rate`.


```python
market_share = 0.08
share_growth_rate = np.append(0, np.repeat(0.2, 4))
share_growth = market_share * (share_growth_rate + 1).cumprod()
pd.DataFrame({'Cuota del mercado': share_growth}, index=years).T.style.format('{0:.0%}')
```




<style  type="text/css" >
</style><table id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >1</th>        <th class="col_heading level0 col1" >2</th>        <th class="col_heading level0 col2" >3</th>        <th class="col_heading level0 col3" >4</th>        <th class="col_heading level0 col4" >5</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >Cuota del mercado</th>
                        <td id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >8%</td>
                        <td id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >10%</td>
                        <td id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >12%</td>
                        <td id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >14%</td>
                        <td id="T_ea1ebfe0_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >17%</td>
            </tr>
    </tbody></table>



Y así, obtenemos las ventas (mensuales) como el producto de los dos vectores anteriores:


```python
sales = market_growth * share_growth
pd.DataFrame({'Ventas mensuales': sales}, index=years).T.style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >1</th>        <th class="col_heading level0 col1" >2</th>        <th class="col_heading level0 col2" >3</th>        <th class="col_heading level0 col3" >4</th>        <th class="col_heading level0 col4" >5</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >Ventas mensuales</th>
                        <td id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$160,000.00</td>
                        <td id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >$197,760.00</td>
                        <td id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >$244,431.36</td>
                        <td id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >$302,117.16</td>
                        <td id="T_ea3f78ca_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >$373,416.81</td>
            </tr>
    </tbody></table>



Los ingresos anuales `Annual Revenue` se obtienen de la ventas mensuales por el precio de venta (multiplicado por 12), y los costos `Annual Costs` se calculan de las ventas por los costos unitarios. Así, el beneficio anual `Profit` se obtiene de la resta de cada uno de los valores anteriores para cada año.


```python
annual_revenue = sales * unit_revenue * 12
annual_costs = sales * unit_cost * 12
profit = annual_revenue - annual_costs
pd.DataFrame({'Beneficio anual': profit}, index=years).T.style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ea562aca_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >1</th>        <th class="col_heading level0 col1" >2</th>        <th class="col_heading level0 col2" >3</th>        <th class="col_heading level0 col3" >4</th>        <th class="col_heading level0 col4" >5</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ea562aca_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >Beneficio anual</th>
                        <td id="T_ea562aca_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$172,800,000.00</td>
                        <td id="T_ea562aca_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >$213,580,800.00</td>
                        <td id="T_ea562aca_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >$263,985,868.80</td>
                        <td id="T_ea562aca_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >$326,286,533.84</td>
                        <td id="T_ea562aca_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >$403,290,155.82</td>
            </tr>
    </tbody></table>



El beneficio neto acumulado lo podemos calcular como una suma acumulada a la que se le restan los costos de inversión totales.


```python
net_profit = profit.cumsum() - total_costs
pd.DataFrame({'Beneficio neto acumulado': net_profit}, index=years).T.style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >1</th>        <th class="col_heading level0 col1" >2</th>        <th class="col_heading level0 col2" >3</th>        <th class="col_heading level0 col3" >4</th>        <th class="col_heading level0 col4" >5</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >Beneficio neto acumulado</th>
                        <td id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$-677,200,000.00</td>
                        <td id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >$-463,619,200.00</td>
                        <td id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >$-199,633,331.20</td>
                        <td id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >$126,653,202.64</td>
                        <td id="T_ea6e3bd8_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >$529,943,358.46</td>
            </tr>
    </tbody></table>



Como se puede observar en este caso, a partir del 4to año el beneficio neto empieza a dar positivo, por lo que se ha recuperado la inversión.

Finalmente, el valor presente de la inversión lo calculamos utilizando la función correspondiente de numpy.


```python
net_pv = np.pv(discount_rate, range(1, 6), 0, -profit).sum() - total_costs
display(Markdown(f"**Valor presente neto** : ${net_pv:,.2f}"))
```


**Valor presente neto** : $185,404,859.91


## Configurando las distribuciones para la simulación

El modelo anterior se puede considerar una fotografía de la enorme cantidad de posibilidades que podríamos tener, muchos factores son aleatorios y se desean explorar los patrones que surgen cuando operan de manera conjunta.

En el caso de este modelo se considera que los siguientes factores son aleatorios:
 * El tamaño del mercado está distribuido normal con $\mu = \$2,000,000$ y $\sigma = \$400,000$.
 * La inversión en investigación y desarrollo es uniforme entre $\$600,000,000$ y $\$800,000,000$.
 * La inversión en ensayos clínicos es lognormal con $\mu = \$150,000,000$ y $\sigma = \$30,000,000$.
 * El factor de crecimiento del mercado es triangular con mínimo $2\%$, máximo $6\%$, y valor más probable $3\%$.
 * la tasa de crecimiento de la cuota de mercado es triangular con mínimo $15\%$, máximo $25\%$, y valor más probable $20\%$.
 
Vamos a ver como simulamos estas distribuciones una a una.

Para el caso del tamaño del mercado:


```python
market_size = np.random.normal(2000000, 400000, 10000)
plt.hist(market_size, bins=25)
plt.show()
```


![png](output_21_0.png)


Para la inversión en investigación y desarrollo:


```python
rd_cost = np.random.uniform(600000000, 800000000, 10000)
plt.hist(rd_cost, bins=25)
plt.show()
```


![png](output_23_0.png)


En el caso de la lognormal hay una pequeña complicación, porque en numpy la media y la desviación estándar que recibe la función como parámetros son de la distribución normal interna o subyacente, mientras que los valores dados corresponden a la propia log-normal.

Así, $\mu_L$ y $\sigma_L$ son los valores dados de la lognormal, y $\mu_N$ y $\sigma_N$ los de la distribución normal que hay que introducir a la función. 

\begin{equation*}
\mu_L = \exp\left(\mu_N+\frac{\sigma_N^2}{2}\right) \\
\sigma_L^2 = [\exp(\sigma_N^2)-1] \exp(2\mu_N+\sigma_N^2)   \tag{0}
\end{equation*}

Se necesitan expresar $\mu_N$ y $\sigma_N$ en función de $\mu_L$ y $\sigma_L$.

Para lograr esto, aplicamos algoritmos a ambos lados de cada expresión:

\begin{equation*}
ln(\mu_L) = ln\left(\exp\left(\mu_N+\frac{\sigma_N^2}{2}\right)\right) \\
ln(\mu_L) = \mu_N+\frac{\sigma_N^2}{2}
\end{equation*}

Así,

\begin{equation*}
\mu_N = ln(\mu_L)-\frac{\sigma_N^2}{2}  \tag{1}
\end{equation*}

y

\begin{equation*}
ln\left(\sigma_L^2\right) = ln\left([\exp(\sigma_N^2)-1] \exp(2\mu_N+\sigma_N^2)\right) \\
2ln(\sigma_L) = ln\left([\exp(\sigma_N^2)-1]\right)+ln\left(\exp(2\mu_N+\sigma_N^2)\right)
\end{equation*}

\begin{equation*}
2ln(\sigma_L) = ln\left([\exp(\sigma_N^2)-1]\right)+2\mu_N+\sigma_N^2   \tag{2}
\end{equation*}

Sustituyendo $(1)$ en $(2)$.

\begin{align*}
2ln(\sigma_L) = ln\left([\exp(\sigma_N^2)-1]\right)+2(ln(\mu_L)-\frac{\sigma_N^2}{2})+\sigma_N^2 \\
2ln(\sigma_L) = ln\left([\exp(\sigma_N^2)-1]\right)+2ln(\mu_L)-\sigma_N^2+\sigma_N^2
\end{align*}

Simplificando

\begin{equation*}
ln\left([\exp(\sigma_N^2)-1]\right) = 2ln(\sigma_L)-2ln(\mu_L) \\
ln\left([\exp(\sigma_N^2)-1]\right) = ln\left(\frac{\sigma_L^2}{\mu_L^2}\right) \\
[\exp(\sigma_N^2)-1] = \left(\frac{\sigma_L}{\mu_L}\right)^2
\end{equation*}

Nos queda entonces:

\begin{equation*}
ln\exp(\sigma_N^2) = ln\left(\left(\frac{\sigma_L^2}{\mu_L^2}\right) + 1\right) \\
\sigma_N^2 = ln\left(\frac{\sigma_L^2}{\mu_L^2}\right) + 1 \\
\end{equation*}

\begin{equation*}
\sigma_N = \sqrt{1 + ln\left(\frac{\sigma_L^2}{\mu_L^2}\right)}    \tag{3}
\end{equation*}

De esta forma, hallamos $\sigma_N$ usando $(3)$, y con este valor encontramos $\mu_N$ usando $(1)$, lo que en python se traduce en:


```python
from math import sqrt, log

lognormal_mean = 150000000
lognormal_std = 30000000

normal_std = sqrt(log(1 + (lognormal_std/lognormal_mean)**2))
normal_mean = log(lognormal_mean) - normal_std**2 / 2
display(Markdown(f"$\mu_N$ = {normal_mean:.6f}, $\sigma_N$ = {normal_std:.6f}"))
```


$\mu_N$ = 18.806535, $\sigma_N$ = 0.198042


El desarrollo de estas expresiones se hace con dos objetivos pedagógicos:

1. Dar un ejemplo de como escribir ecuaciones en formato $\LaTeX$ y,
2. Mostrar como es necesario de vez en cuando recurrir a las matemáticas y la estadística para utilizar adecuadamente las herramientas.

Más aún, igualando las ecuaciones $(0)$ a cero,

\begin{equation*}
\exp\left(\mu_N+\frac{\sigma_N^2}{2}\right) - \mu_L = 0 \\
\sqrt{[\exp(\sigma_N^2)-1] \exp(2\mu_N+\sigma_N^2)} - \sigma_L = 0
\end{equation*}

podríamos haber obtenido los parámetros de la normal subyacente utilizando métodos numéricos como sigue:


```python
from math import exp, sqrt
from scipy import optimize

def fun(x):
    return [exp(x[0] + x[1]**2 / 2) - 150000000,
            sqrt((exp(x[1]**2) - 1) * exp(2 * x[0] + x[1]**2)) - 30000000]

sol = optimize.root(fun, [0, 0], jac=False, method='lm')

display(Markdown(f"$\mu_N$ = {sol.x[0]:.6f}, $\sigma_N$ = {sol.x[1]:.6f}"))
```


$\mu_N$ = 18.806535, $\sigma_N$ = 0.198042


La simulación de la distribución queda como sigue,


```python
trials_cost = np.random.lognormal(normal_mean, normal_std, 10000)
plt.hist(trials_cost, bins=25)
plt.show()
```


![png](output_29_0.png)


Nótese en el gráfico como la media de la distribución se corresponde con los 150 millones.

Para la simulación de las distribuciones triangulares no tenemos mayor problema, esta sería la simulación del factor de crecimiento del mercado:


```python
growth_factor = np.random.triangular(0.02, 0.03, 0.06, 10000)
plt.hist(growth_factor, bins=25)
plt.show()
```


![png](output_31_0.png)


Y la tasa de crecimiento de la cuota de mercado,


```python
share_growth_rate = np.random.triangular(0.15, 0.20, 0.25, 10000)
plt.hist(share_growth_rate, bins=25)
plt.show()
```


![png](output_33_0.png)


## Modelo de Simulación

Ahora tenemos que juntar todo lo anterior para generar un buen número de replicas, digamos 10 mil, a partir de las observaciones aleatorias mencionadas arriba. En lo fundamental, se trata de re-escribir el método estático sustituyendo las valores fijos por las respectivas distribuciones de probabilidad, teniendo cuidado de escribir las replicas utilizando la vectorización.

Empezamos por la demanda inicial.


```python
market_size = np.random.normal(2000000, 400000, (10000, 1))
df_market_size = pd.DataFrame(market_size, columns=["Mercado"])
fill = pd.DataFrame([[np.nan]], columns=df_market_size.columns, index=[-1])
pd.concat([df_market_size.head(), fill, df_market_size.tail()]).style.format('{:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >Mercado</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >1,652,239.64</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >1,969,999.61</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >2,163,194.86</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >2,026,208.19</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >1,508,792.95</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row5" class="row_heading level0 row5" >-1</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row5_col0" class="data row5 col0" >nan</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row6" class="row_heading level0 row6" >9995</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row6_col0" class="data row6 col0" >2,186,960.44</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row7" class="row_heading level0 row7" >9996</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row7_col0" class="data row7 col0" >2,266,746.44</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row8" class="row_heading level0 row8" >9997</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row8_col0" class="data row8 col0" >1,612,958.28</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row9" class="row_heading level0 row9" >9998</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row9_col0" class="data row9 col0" >1,614,676.92</td>
            </tr>
            <tr>
                        <th id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727level0_row10" class="row_heading level0 row10" >9999</th>
                        <td id="T_ec7d162e_fc0f_11e9_866b_24fd527cc727row10_col0" class="data row10 col0" >2,318,227.67</td>
            </tr>
    </tbody></table>



Nótese la especificación de la forma como un vector columna, esto es conveniente para las operaciones matriciales. Convertimos los datos a un DataFrame, al igual que arriba, solamente para que aparezca en un formato tabular. 

La inversión en investigación y desarrollo sería:


```python
rd_cost = np.random.uniform(600000000, 800000000, (10000, 1))
df_rd_cost = pd.DataFrame(rd_cost, columns=["I&D"])
df_rd_cost.head().style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >I&D</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$789,017,336.24</td>
            </tr>
            <tr>
                        <th id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >$681,778,711.82</td>
            </tr>
            <tr>
                        <th id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >$609,999,767.67</td>
            </tr>
            <tr>
                        <th id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >$741,289,119.26</td>
            </tr>
            <tr>
                        <th id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ec9c3a5e_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >$778,498,962.07</td>
            </tr>
    </tbody></table>



Se utiliza el método head para que devuelva solamente los primeros 5 valores de la tabla.

La inversión en ensayos clínicos:


```python
trials_cost = np.random.lognormal(normal_mean, normal_std, (10000, 1))
df_trials_cost = pd.DataFrame(trials_cost, columns=["Trials"])
df_trials_cost.head().style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >Trials</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$129,832,559.70</td>
            </tr>
            <tr>
                        <th id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >$155,901,122.92</td>
            </tr>
            <tr>
                        <th id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >$188,361,209.28</td>
            </tr>
            <tr>
                        <th id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >$122,215,935.09</td>
            </tr>
            <tr>
                        <th id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ecb33f60_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >$117,333,770.31</td>
            </tr>
    </tbody></table>



Para simular tanto el factor de crecimiento del mercado, como la tasa de crecimiento de la cuota de mercado, se deben simular cuatro valores para cada réplica, y además añadir un cero inicial para realizar las operaciones vectorizadas.


```python
growth_factor = np.random.triangular(0.02, 0.03, 0.06, (10000, 4))
growth_factor = np.hstack((np.zeros((10000, 1)), growth_factor))
df_growth_factor = pd.DataFrame(growth_factor, columns=["f0", "f1", "f2", "f3", "f4"])
df_growth_factor.head().style.format('{:.4%}')
```




<style  type="text/css" >
</style><table id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >f0</th>        <th class="col_heading level0 col1" >f1</th>        <th class="col_heading level0 col2" >f2</th>        <th class="col_heading level0 col3" >f3</th>        <th class="col_heading level0 col4" >f4</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >0.0000%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >2.4764%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >3.1657%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >3.5671%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >3.2335%</td>
            </tr>
            <tr>
                        <th id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >0.0000%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row1_col1" class="data row1 col1" >3.2036%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row1_col2" class="data row1 col2" >3.1690%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row1_col3" class="data row1 col3" >3.8859%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row1_col4" class="data row1 col4" >2.6284%</td>
            </tr>
            <tr>
                        <th id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >0.0000%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row2_col1" class="data row2 col1" >2.9057%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row2_col2" class="data row2 col2" >4.9937%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row2_col3" class="data row2 col3" >3.1970%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row2_col4" class="data row2 col4" >2.5166%</td>
            </tr>
            <tr>
                        <th id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >0.0000%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row3_col1" class="data row3 col1" >3.9681%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row3_col2" class="data row3 col2" >2.7311%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row3_col3" class="data row3 col3" >2.6351%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row3_col4" class="data row3 col4" >5.7171%</td>
            </tr>
            <tr>
                        <th id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >0.0000%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row4_col1" class="data row4 col1" >3.3604%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row4_col2" class="data row4 col2" >3.7505%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row4_col3" class="data row4 col3" >2.6006%</td>
                        <td id="T_ecca5d30_fc0f_11e9_866b_24fd527cc727row4_col4" class="data row4 col4" >4.0251%</td>
            </tr>
    </tbody></table>




```python
share_growth_rate = np.random.triangular(0.15, 0.20, 0.25, (10000, 4))
share_growth_rate = np.hstack((np.zeros((10000, 1)), share_growth_rate))
df_share_growth_rate = pd.DataFrame(share_growth_rate, columns=["t0", "t1", "t2", "t3", "t4"])
df_share_growth_rate.head().style.format('{:.4%}')
```




<style  type="text/css" >
</style><table id="T_ece1191c_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >t0</th>        <th class="col_heading level0 col1" >t1</th>        <th class="col_heading level0 col2" >t2</th>        <th class="col_heading level0 col3" >t3</th>        <th class="col_heading level0 col4" >t4</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ece1191c_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >0.0000%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >20.6200%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >23.3980%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >22.2926%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >21.0754%</td>
            </tr>
            <tr>
                        <th id="T_ece1191c_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >0.0000%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row1_col1" class="data row1 col1" >17.9850%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row1_col2" class="data row1 col2" >22.0162%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row1_col3" class="data row1 col3" >20.2440%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row1_col4" class="data row1 col4" >19.9272%</td>
            </tr>
            <tr>
                        <th id="T_ece1191c_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >0.0000%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row2_col1" class="data row2 col1" >20.1128%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row2_col2" class="data row2 col2" >19.4268%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row2_col3" class="data row2 col3" >19.5343%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row2_col4" class="data row2 col4" >20.7639%</td>
            </tr>
            <tr>
                        <th id="T_ece1191c_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >0.0000%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row3_col1" class="data row3 col1" >20.2069%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row3_col2" class="data row3 col2" >18.5348%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row3_col3" class="data row3 col3" >18.6056%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row3_col4" class="data row3 col4" >21.9466%</td>
            </tr>
            <tr>
                        <th id="T_ece1191c_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >0.0000%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row4_col1" class="data row4 col1" >21.0364%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row4_col2" class="data row4 col2" >19.1765%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row4_col3" class="data row4 col3" >21.9899%</td>
                        <td id="T_ece1191c_fc0f_11e9_866b_24fd527cc727row4_col4" class="data row4 col4" >19.9574%</td>
            </tr>
    </tbody></table>



A continuación, para calcular el crecimiento del mercado utilizando los factores de crecimiento recién generados, utilizamos la misma expresión indicada arriba con el detalle de añadir el parámetro `axis=1` para realizar la multiplicación fila por fila.


```python
market_growth = market_size * (growth_factor + 1).cumprod(axis=1)
df_market_growth = pd.DataFrame(market_growth, columns=["M0", "M1", "M2", "M3", "M4"])
df_market_growth.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>M0</th>
      <th>M1</th>
      <th>M2</th>
      <th>M3</th>
      <th>M4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.652240e+06</td>
      <td>1.693156e+06</td>
      <td>1.746757e+06</td>
      <td>1.809065e+06</td>
      <td>1.867560e+06</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.970000e+06</td>
      <td>2.033111e+06</td>
      <td>2.097540e+06</td>
      <td>2.179049e+06</td>
      <td>2.236324e+06</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.163195e+06</td>
      <td>2.226050e+06</td>
      <td>2.337212e+06</td>
      <td>2.411933e+06</td>
      <td>2.472632e+06</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2.026208e+06</td>
      <td>2.106610e+06</td>
      <td>2.164143e+06</td>
      <td>2.221170e+06</td>
      <td>2.348157e+06</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.508793e+06</td>
      <td>1.559495e+06</td>
      <td>1.617983e+06</td>
      <td>1.660061e+06</td>
      <td>1.726880e+06</td>
    </tr>
  </tbody>
</table>
</div>



Para realizar la simulación del crecimiento de la cuota de mercado creamos antes un vector columna con los valores de la cuota de mercado inicial.


```python
market_share = np.tile(0.08, (10000, 1))
share_growth = market_share * (share_growth_rate + 1).cumprod(axis=1)
df_share_growth = pd.DataFrame(share_growth, columns=["Q0", "Q1", "Q2", "Q3", "Q4"])
df_share_growth.head().style.format('{:.4%}')
```




<style  type="text/css" >
</style><table id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >Q0</th>        <th class="col_heading level0 col1" >Q1</th>        <th class="col_heading level0 col2" >Q2</th>        <th class="col_heading level0 col3" >Q3</th>        <th class="col_heading level0 col4" >Q4</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >8.0000%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >9.6496%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >11.9074%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >14.5619%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >17.6309%</td>
            </tr>
            <tr>
                        <th id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >8.0000%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row1_col1" class="data row1 col1" >9.4388%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row1_col2" class="data row1 col2" >11.5169%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row1_col3" class="data row1 col3" >13.8483%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row1_col4" class="data row1 col4" >16.6079%</td>
            </tr>
            <tr>
                        <th id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >8.0000%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row2_col1" class="data row2 col1" >9.6090%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row2_col2" class="data row2 col2" >11.4757%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row2_col3" class="data row2 col3" >13.7175%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row2_col4" class="data row2 col4" >16.5657%</td>
            </tr>
            <tr>
                        <th id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >8.0000%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row3_col1" class="data row3 col1" >9.6166%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row3_col2" class="data row3 col2" >11.3990%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row3_col3" class="data row3 col3" >13.5198%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row3_col4" class="data row3 col4" >16.4869%</td>
            </tr>
            <tr>
                        <th id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >8.0000%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row4_col1" class="data row4 col1" >9.6829%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row4_col2" class="data row4 col2" >11.5398%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row4_col3" class="data row4 col3" >14.0773%</td>
                        <td id="T_ed1213b4_fc0f_11e9_866b_24fd527cc727row4_col4" class="data row4 col4" >16.8868%</td>
            </tr>
    </tbody></table>



Los cálculos de las ventas, ingresos, costos y beneficios se mantienen idénticos:


```python
sales = market_growth * share_growth
annual_revenue = sales * unit_revenue * 12
annual_costs = sales * unit_cost * 12
profit = annual_revenue - annual_costs
total_costs = rd_cost + trials_cost
df_sales = pd.DataFrame(sales, columns=["S0", "S1", "S2", "S3", "S4"])
df_sales.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>S0</th>
      <th>S1</th>
      <th>S2</th>
      <th>S3</th>
      <th>S4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>132179.171553</td>
      <td>163382.784721</td>
      <td>207993.551040</td>
      <td>263433.900357</td>
      <td>329266.919016</td>
    </tr>
    <tr>
      <th>1</th>
      <td>157599.969101</td>
      <td>191901.224300</td>
      <td>241570.911766</td>
      <td>301762.089695</td>
      <td>371406.892945</td>
    </tr>
    <tr>
      <th>2</th>
      <td>173055.588797</td>
      <td>213901.688289</td>
      <td>268212.546825</td>
      <td>330855.659805</td>
      <td>409609.498834</td>
    </tr>
    <tr>
      <th>3</th>
      <td>162096.654800</td>
      <td>202583.236053</td>
      <td>246689.751191</td>
      <td>300297.779327</td>
      <td>387138.942603</td>
    </tr>
    <tr>
      <th>4</th>
      <td>120703.435851</td>
      <td>151004.502944</td>
      <td>186711.234225</td>
      <td>233692.317113</td>
      <td>291615.027497</td>
    </tr>
  </tbody>
</table>
</div>




```python
df_annual_revenue = pd.DataFrame(annual_revenue, columns=["IA0", "IA1", "IA2", "IA3", "IA4"])
df_annual_revenue.head().style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >IA0</th>        <th class="col_heading level0 col1" >IA1</th>        <th class="col_heading level0 col2" >IA2</th>        <th class="col_heading level0 col3" >IA3</th>        <th class="col_heading level0 col4" >IA4</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$206,199,507.62</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >$254,877,144.16</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >$324,469,939.62</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >$410,956,884.56</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >$513,656,393.66</td>
            </tr>
            <tr>
                        <th id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >$245,855,951.80</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row1_col1" class="data row1 col1" >$299,365,909.91</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row1_col2" class="data row1 col2" >$376,850,622.36</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row1_col3" class="data row1 col3" >$470,748,859.92</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row1_col4" class="data row1 col4" >$579,394,752.99</td>
            </tr>
            <tr>
                        <th id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >$269,966,718.52</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row2_col1" class="data row2 col1" >$333,686,633.73</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row2_col2" class="data row2 col2" >$418,411,573.05</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row2_col3" class="data row2 col3" >$516,134,829.30</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row2_col4" class="data row2 col4" >$638,990,818.18</td>
            </tr>
            <tr>
                        <th id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >$252,870,781.49</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row3_col1" class="data row3 col1" >$316,029,848.24</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row3_col2" class="data row3 col2" >$384,836,011.86</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row3_col3" class="data row3 col3" >$468,464,535.75</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row3_col4" class="data row3 col4" >$603,936,750.46</td>
            </tr>
            <tr>
                        <th id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >$188,297,359.93</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row4_col1" class="data row4 col1" >$235,567,024.59</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row4_col2" class="data row4 col2" >$291,269,525.39</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row4_col3" class="data row4 col3" >$364,560,014.70</td>
                        <td id="T_ed4dbdce_fc0f_11e9_866b_24fd527cc727row4_col4" class="data row4 col4" >$454,919,442.90</td>
            </tr>
    </tbody></table>




```python
df_annual_costs = pd.DataFrame(annual_costs, columns=["CA0", "CA1", "CA2", "CA3", "CA4"])
df_annual_costs.head().style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >CA0</th>        <th class="col_heading level0 col1" >CA1</th>        <th class="col_heading level0 col2" >CA2</th>        <th class="col_heading level0 col3" >CA3</th>        <th class="col_heading level0 col4" >CA4</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$63,446,002.35</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >$78,423,736.67</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >$99,836,904.50</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >$126,448,272.17</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >$158,048,121.13</td>
            </tr>
            <tr>
                        <th id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >$75,647,985.17</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row1_col1" class="data row1 col1" >$92,112,587.66</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row1_col2" class="data row1 col2" >$115,954,037.65</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row1_col3" class="data row1 col3" >$144,845,803.05</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row1_col4" class="data row1 col4" >$178,275,308.61</td>
            </tr>
            <tr>
                        <th id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >$83,066,682.62</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row2_col1" class="data row2 col1" >$102,672,810.38</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row2_col2" class="data row2 col2" >$128,742,022.48</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row2_col3" class="data row2 col3" >$158,810,716.71</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row2_col4" class="data row2 col4" >$196,612,559.44</td>
            </tr>
            <tr>
                        <th id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >$77,806,394.30</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row3_col1" class="data row3 col1" >$97,239,953.31</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row3_col2" class="data row3 col2" >$118,411,080.57</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row3_col3" class="data row3 col3" >$144,142,934.08</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row3_col4" class="data row3 col4" >$185,826,692.45</td>
            </tr>
            <tr>
                        <th id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >$57,937,649.21</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row4_col1" class="data row4 col1" >$72,482,161.41</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row4_col2" class="data row4 col2" >$89,621,392.43</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row4_col3" class="data row4 col3" >$112,172,312.21</td>
                        <td id="T_ed6eccf8_fc0f_11e9_866b_24fd527cc727row4_col4" class="data row4 col4" >$139,975,213.20</td>
            </tr>
    </tbody></table>



El cálculo del beneficio neto acumulado solamente requiere de tener cuidado con que las operaciones sean por filas.


```python
net_profit = profit.cumsum(axis=1) - total_costs
df_net_profit = pd.DataFrame(net_profit, columns=["BNA0", "BNA1", "BNA2", "BNA3", "BNA4"])
df_net_profit.head().style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_ed87d176_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >BNA0</th>        <th class="col_heading level0 col1" >BNA1</th>        <th class="col_heading level0 col2" >BNA2</th>        <th class="col_heading level0 col3" >BNA3</th>        <th class="col_heading level0 col4" >BNA4</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_ed87d176_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$-776,096,390.66</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row0_col1" class="data row0 col1" >$-599,642,983.16</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row0_col2" class="data row0 col2" >$-375,009,948.04</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row0_col3" class="data row0 col3" >$-90,501,335.65</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row0_col4" class="data row0 col4" >$265,106,936.89</td>
            </tr>
            <tr>
                        <th id="T_ed87d176_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >$-667,471,868.11</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row1_col1" class="data row1 col1" >$-460,218,545.86</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row1_col2" class="data row1 col2" >$-199,321,961.15</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row1_col3" class="data row1 col3" >$126,581,095.72</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row1_col4" class="data row1 col4" >$527,700,540.10</td>
            </tr>
            <tr>
                        <th id="T_ed87d176_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >$-611,460,941.05</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row2_col1" class="data row2 col1" >$-380,447,117.70</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row2_col2" class="data row2 col2" >$-90,777,567.13</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row2_col3" class="data row2 col3" >$266,546,545.46</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row2_col4" class="data row2 col4" >$708,924,804.20</td>
            </tr>
            <tr>
                        <th id="T_ed87d176_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >$-688,440,667.17</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row3_col1" class="data row3 col1" >$-469,650,772.23</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row3_col2" class="data row3 col2" >$-203,225,840.94</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row3_col3" class="data row3 col3" >$121,095,760.73</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row3_col4" class="data row3 col4" >$539,205,818.74</td>
            </tr>
            <tr>
                        <th id="T_ed87d176_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >$-765,473,021.66</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row4_col1" class="data row4 col1" >$-602,388,158.48</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row4_col2" class="data row4 col2" >$-400,740,025.52</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row4_col3" class="data row4 col3" >$-148,352,323.04</td>
                        <td id="T_ed87d176_fc0f_11e9_866b_24fd527cc727row4_col4" class="data row4 col4" >$166,591,906.66</td>
            </tr>
    </tbody></table>



Finalmente, el cálculo del valor presente neto para todas las réplicas aparte de realizar la suma por filas requiere que se mantengan las dimensiones `keepdims=True` porque la suma sobre los vectores por defecto aplana el resultado.


```python
net_pv = np.pv(discount_rate, range(1, 6), 0, -profit).sum(axis=1, keepdims=True) - total_costs
df_net_pv = pd.DataFrame(net_pv, columns=["VPneto"])
df_net_pv.head().style.format('${:,.2f}')
```




<style  type="text/css" >
</style><table id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >VPneto</th>    </tr></thead><tbody>
                <tr>
                        <th id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727level0_row0" class="row_heading level0 row0" >0</th>
                        <td id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727row0_col0" class="data row0 col0" >$-33,234,104.37</td>
            </tr>
            <tr>
                        <th id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727level0_row1" class="row_heading level0 row1" >1</th>
                        <td id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727row1_col0" class="data row1 col0" >$185,953,329.08</td>
            </tr>
            <tr>
                        <th id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727level0_row2" class="row_heading level0 row2" >2</th>
                        <td id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727row2_col0" class="data row2 col0" >$331,877,625.65</td>
            </tr>
            <tr>
                        <th id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727level0_row3" class="row_heading level0 row3" >3</th>
                        <td id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727row3_col0" class="data row3 col0" >$188,484,931.84</td>
            </tr>
            <tr>
                        <th id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727level0_row4" class="row_heading level0 row4" >4</th>
                        <td id="T_eda3c2e6_fc0f_11e9_866b_24fd527cc727row4_col0" class="data row4 col0" >$-99,772,092.68</td>
            </tr>
    </tbody></table>



Ahora podemos tener la distribución del valor presente neto del proyecto.


```python
plt.hist(net_pv, bins=25)
plt.show()
```


![png](output_57_0.png)


Se puede observar que si bien la media está alrededor de los 200 millones de dólares existe la posibilidad de tener retornos negativos.

Para calcular este porcentaje sacamos provecho que en Python un valor lógico verdadero `True` es equivalente a 1 para las operaciones aritméticas. De esta manera, 


```python
negative_risk = (net_pv < 0).mean()
display(Markdown(f"Riesgo de retornos negativos = {negative_risk:.2%}"))
```


Riesgo de retornos negativos = 18.98%


Nos quedan dos preguntas pendientes:
* ¿Cuál es la probabilidad de obtener beneficios acumulados netos (positivos) para el tercer año?
* ¿Qué beneficio acumulado mínimo se obtendría en el 5to año con una probabilidad de por lo menos el 90%?


```python
(net_profit[:, 2] > 0).mean()
```




    0.0913




```python
np.percentile(net_profit[:, 4], 10)
```




    175306982.56709474




```python

```
